//
// EPITECH PROJECT, 2018
// rtype
// File description:
// component
//

#ifndef COMPONENT_HPP_
	#define COMPONENT_HPP_

namespace Engine {
	class Component;
}

	#include <ostream>
	#include "GameEngine.hpp"
	#include "Transform.hpp"
	#include "ARenderer.hpp"

namespace Engine {
	class Component {
	public:
		// Ctor & Dtor
		Component(GameEngine &gameEngine, bool friendly);
		virtual ~Component() = default;
		// Setter
		void	setID(int id) noexcept;
		void	setSpeed(float speed) noexcept;
		void	setARenderer(Engine::ARenderer *renderer)
			noexcept;
		// Getter
		int		getID() const noexcept;
		bool		isOver() const noexcept;
		float		getSpeed() const noexcept;
		bool		isFriendly() const noexcept;
		Transform	&getTransform() noexcept;
		const Transform	&getTransform() const noexcept;
		const Engine::ARenderer	*getARenderer() const noexcept;
		// Method
		virtual void	doTick();
		virtual void	onColliding(Component &compo);
	protected:
		GameEngine		&_gameEngine;
		Engine::ARenderer	*_renderer = nullptr;
		bool			_friendly = false;
		bool			_isOver = false;
		float			_speed = 1.0;
		Transform		_transform;
	private:
		int			_id;
		static int		next_id;
	};
}

	// Extern operator
	std::ostream	&operator<<(std::ostream &stream,
				const Engine::Component &target)
				noexcept;

#endif /* !COMPONENT_HPP_ */
